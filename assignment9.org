
* Dowloaded the Assignmnet9.pcap file.

* Opened with wireshark and looked around. It has many ip address involved.

* 1st question: Unique ipv4 addresses

** used tshark for this

** tshark -r Assignments9.pcap -q -z hosts,ipv4

*** retuned hosts and ipv4 addresses

*** used the wc -l to count the line //tshark -r Assignements9.pcap -q -z hosts,ipv4 | wc -l

*** returned 237. havent worked in exfil flag.

** tried tshark -r Assignments9.pcap -T fields -e ip.dst ip.src | sort | uniq | wc -l

*** returned 223.

*** Flag is 223. Worked in the exfil challenge.
    
* 2nd: source and destination ip addreses leaking info

** tcpdump -tnr Assignment9.pcap | sort | uniq | sort -n | tail

** returned source and destination ip with maxpacket length

** Noisiest hosts on the network

** Tried ip's with max activity and packet lenghts. Didnt work

** Uplaoded the file in wireshark.

** Browsed around to any suspicious activity.

** Looked for ICMP protocol has more activity than usual.

** Filtered ICMP protocol in that pcap file

** Found the IP addresses of the leaker and the reciever.

** IP address thats leaking information. 192.168.64.137

** IP address that's recieving the information 138.197.108.176

* 3rd question: Finding the flag

** Now that we have identified the source, destination and the protocol used(ICMP)

** Lets use this info find the file and the flag.

** we use scapy for this.

*** Its a packet manipulation program.

*** It can forge and decode packets of different protocols.

*** We can construct packets and print thing we need based on protocols using the python code.

*** Now that we know the ip addresses of person leaking and recieving the info we need to find the file and the flag in it.

*** We read the pcap file a =rdpcap("/../Assignment9.pcap")

*** Wrote python script tp copy the raw load to a hex file.

import scapy.all as scapy
import sys

a = rdpcap("/Assignment9.pcap")
op=b''

for i in range(len(a)):
	p=a[i]
	if p.haslayer(ICMP) and p[IP].src=="138.197.108.176" and p[IP].dst=="192.168.64.137":
		op += binascii.hexlify(p[Raw].load)

with open("opt.hex","wb") as hfile:
	hfile.write(op)

*** Then we use the xxd -r -p opt.hex opt.bin
*** The file type has to be identified and its a image png file so lets convert.
*** xxd -r -p opt.hex opt.png
